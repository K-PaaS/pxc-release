// This file was generated by counterfeiter
package monitorfakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/switchboard/runner/monitor"
)

type FakeArpManager struct {
	ClearCacheStub        func(ip string) error
	clearCacheMutex       sync.RWMutex
	clearCacheArgsForCall []struct {
		ip string
	}
	clearCacheReturns struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeArpManager) ClearCache(ip string) error {
	fake.clearCacheMutex.Lock()
	fake.clearCacheArgsForCall = append(fake.clearCacheArgsForCall, struct {
		ip string
	}{ip})
	fake.recordInvocation("ClearCache", []interface{}{ip})
	fake.clearCacheMutex.Unlock()
	if fake.ClearCacheStub != nil {
		return fake.ClearCacheStub(ip)
	} else {
		return fake.clearCacheReturns.result1
	}
}

func (fake *FakeArpManager) ClearCacheCallCount() int {
	fake.clearCacheMutex.RLock()
	defer fake.clearCacheMutex.RUnlock()
	return len(fake.clearCacheArgsForCall)
}

func (fake *FakeArpManager) ClearCacheArgsForCall(i int) string {
	fake.clearCacheMutex.RLock()
	defer fake.clearCacheMutex.RUnlock()
	return fake.clearCacheArgsForCall[i].ip
}

func (fake *FakeArpManager) ClearCacheReturns(result1 error) {
	fake.ClearCacheStub = nil
	fake.clearCacheReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeArpManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clearCacheMutex.RLock()
	defer fake.clearCacheMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeArpManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ monitor.ArpManager = new(FakeArpManager)
