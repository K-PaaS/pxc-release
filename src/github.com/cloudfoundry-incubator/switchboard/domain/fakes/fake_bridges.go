// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"

	"github.com/cloudfoundry-incubator/switchboard/domain"
)

type FakeBridges struct {
	CreateStub        func(clientConn, backendConn net.Conn) domain.Bridge
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		clientConn  net.Conn
		backendConn net.Conn
	}
	createReturns struct {
		result1 domain.Bridge
	}
	RemoveStub        func(bridge domain.Bridge) error
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		bridge domain.Bridge
	}
	removeReturns struct {
		result1 error
	}
	RemoveAndCloseAllStub        func()
	removeAndCloseAllMutex       sync.RWMutex
	removeAndCloseAllArgsForCall []struct{}
	SizeStub                     func() uint
	sizeMutex                    sync.RWMutex
	sizeArgsForCall              []struct{}
	sizeReturns                  struct {
		result1 uint
	}
	ContainsStub        func(bridge domain.Bridge) bool
	containsMutex       sync.RWMutex
	containsArgsForCall []struct {
		bridge domain.Bridge
	}
	containsReturns struct {
		result1 bool
	}
}

func (fake *FakeBridges) Create(clientConn net.Conn, backendConn net.Conn) domain.Bridge {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		clientConn  net.Conn
		backendConn net.Conn
	}{clientConn, backendConn})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(clientConn, backendConn)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeBridges) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeBridges) CreateArgsForCall(i int) (net.Conn, net.Conn) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].clientConn, fake.createArgsForCall[i].backendConn
}

func (fake *FakeBridges) CreateReturns(result1 domain.Bridge) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 domain.Bridge
	}{result1}
}

func (fake *FakeBridges) Remove(bridge domain.Bridge) error {
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		bridge domain.Bridge
	}{bridge})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		return fake.RemoveStub(bridge)
	} else {
		return fake.removeReturns.result1
	}
}

func (fake *FakeBridges) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakeBridges) RemoveArgsForCall(i int) domain.Bridge {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].bridge
}

func (fake *FakeBridges) RemoveReturns(result1 error) {
	fake.RemoveStub = nil
	fake.removeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeBridges) RemoveAndCloseAll() {
	fake.removeAndCloseAllMutex.Lock()
	fake.removeAndCloseAllArgsForCall = append(fake.removeAndCloseAllArgsForCall, struct{}{})
	fake.removeAndCloseAllMutex.Unlock()
	if fake.RemoveAndCloseAllStub != nil {
		fake.RemoveAndCloseAllStub()
	}
}

func (fake *FakeBridges) RemoveAndCloseAllCallCount() int {
	fake.removeAndCloseAllMutex.RLock()
	defer fake.removeAndCloseAllMutex.RUnlock()
	return len(fake.removeAndCloseAllArgsForCall)
}

func (fake *FakeBridges) Size() uint {
	fake.sizeMutex.Lock()
	fake.sizeArgsForCall = append(fake.sizeArgsForCall, struct{}{})
	fake.sizeMutex.Unlock()
	if fake.SizeStub != nil {
		return fake.SizeStub()
	} else {
		return fake.sizeReturns.result1
	}
}

func (fake *FakeBridges) SizeCallCount() int {
	fake.sizeMutex.RLock()
	defer fake.sizeMutex.RUnlock()
	return len(fake.sizeArgsForCall)
}

func (fake *FakeBridges) SizeReturns(result1 uint) {
	fake.SizeStub = nil
	fake.sizeReturns = struct {
		result1 uint
	}{result1}
}

func (fake *FakeBridges) Contains(bridge domain.Bridge) bool {
	fake.containsMutex.Lock()
	fake.containsArgsForCall = append(fake.containsArgsForCall, struct {
		bridge domain.Bridge
	}{bridge})
	fake.containsMutex.Unlock()
	if fake.ContainsStub != nil {
		return fake.ContainsStub(bridge)
	} else {
		return fake.containsReturns.result1
	}
}

func (fake *FakeBridges) ContainsCallCount() int {
	fake.containsMutex.RLock()
	defer fake.containsMutex.RUnlock()
	return len(fake.containsArgsForCall)
}

func (fake *FakeBridges) ContainsArgsForCall(i int) domain.Bridge {
	fake.containsMutex.RLock()
	defer fake.containsMutex.RUnlock()
	return fake.containsArgsForCall[i].bridge
}

func (fake *FakeBridges) ContainsReturns(result1 bool) {
	fake.ContainsStub = nil
	fake.containsReturns = struct {
		result1 bool
	}{result1}
}

var _ domain.Bridges = new(FakeBridges)
