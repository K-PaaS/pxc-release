// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/switchboard/domain"
)

type FakeBackends struct {
	AllStub        func() <-chan domain.Backend
	allMutex       sync.RWMutex
	allArgsForCall []struct{}
	allReturns     struct {
		result1 <-chan domain.Backend
	}
	AnyStub        func() domain.Backend
	anyMutex       sync.RWMutex
	anyArgsForCall []struct{}
	anyReturns     struct {
		result1 domain.Backend
	}
	ActiveStub        func() domain.Backend
	activeMutex       sync.RWMutex
	activeArgsForCall []struct{}
	activeReturns     struct {
		result1 domain.Backend
	}
	SetHealthyStub        func(backend domain.Backend)
	setHealthyMutex       sync.RWMutex
	setHealthyArgsForCall []struct {
		backend domain.Backend
	}
	SetUnhealthyStub        func(backend domain.Backend)
	setUnhealthyMutex       sync.RWMutex
	setUnhealthyArgsForCall []struct {
		backend domain.Backend
	}
	HealthyStub        func() <-chan domain.Backend
	healthyMutex       sync.RWMutex
	healthyArgsForCall []struct{}
	healthyReturns     struct {
		result1 <-chan domain.Backend
	}
	AsJSONStub        func() []domain.BackendJSON
	asJSONMutex       sync.RWMutex
	asJSONArgsForCall []struct{}
	asJSONReturns     struct {
		result1 []domain.BackendJSON
	}
}

func (fake *FakeBackends) All() <-chan domain.Backend {
	fake.allMutex.Lock()
	fake.allArgsForCall = append(fake.allArgsForCall, struct{}{})
	fake.allMutex.Unlock()
	if fake.AllStub != nil {
		return fake.AllStub()
	} else {
		return fake.allReturns.result1
	}
}

func (fake *FakeBackends) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *FakeBackends) AllReturns(result1 <-chan domain.Backend) {
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 <-chan domain.Backend
	}{result1}
}

func (fake *FakeBackends) Any() domain.Backend {
	fake.anyMutex.Lock()
	fake.anyArgsForCall = append(fake.anyArgsForCall, struct{}{})
	fake.anyMutex.Unlock()
	if fake.AnyStub != nil {
		return fake.AnyStub()
	} else {
		return fake.anyReturns.result1
	}
}

func (fake *FakeBackends) AnyCallCount() int {
	fake.anyMutex.RLock()
	defer fake.anyMutex.RUnlock()
	return len(fake.anyArgsForCall)
}

func (fake *FakeBackends) AnyReturns(result1 domain.Backend) {
	fake.AnyStub = nil
	fake.anyReturns = struct {
		result1 domain.Backend
	}{result1}
}

func (fake *FakeBackends) Active() domain.Backend {
	fake.activeMutex.Lock()
	fake.activeArgsForCall = append(fake.activeArgsForCall, struct{}{})
	fake.activeMutex.Unlock()
	if fake.ActiveStub != nil {
		return fake.ActiveStub()
	} else {
		return fake.activeReturns.result1
	}
}

func (fake *FakeBackends) ActiveCallCount() int {
	fake.activeMutex.RLock()
	defer fake.activeMutex.RUnlock()
	return len(fake.activeArgsForCall)
}

func (fake *FakeBackends) ActiveReturns(result1 domain.Backend) {
	fake.ActiveStub = nil
	fake.activeReturns = struct {
		result1 domain.Backend
	}{result1}
}

func (fake *FakeBackends) SetHealthy(backend domain.Backend) {
	fake.setHealthyMutex.Lock()
	fake.setHealthyArgsForCall = append(fake.setHealthyArgsForCall, struct {
		backend domain.Backend
	}{backend})
	fake.setHealthyMutex.Unlock()
	if fake.SetHealthyStub != nil {
		fake.SetHealthyStub(backend)
	}
}

func (fake *FakeBackends) SetHealthyCallCount() int {
	fake.setHealthyMutex.RLock()
	defer fake.setHealthyMutex.RUnlock()
	return len(fake.setHealthyArgsForCall)
}

func (fake *FakeBackends) SetHealthyArgsForCall(i int) domain.Backend {
	fake.setHealthyMutex.RLock()
	defer fake.setHealthyMutex.RUnlock()
	return fake.setHealthyArgsForCall[i].backend
}

func (fake *FakeBackends) SetUnhealthy(backend domain.Backend) {
	fake.setUnhealthyMutex.Lock()
	fake.setUnhealthyArgsForCall = append(fake.setUnhealthyArgsForCall, struct {
		backend domain.Backend
	}{backend})
	fake.setUnhealthyMutex.Unlock()
	if fake.SetUnhealthyStub != nil {
		fake.SetUnhealthyStub(backend)
	}
}

func (fake *FakeBackends) SetUnhealthyCallCount() int {
	fake.setUnhealthyMutex.RLock()
	defer fake.setUnhealthyMutex.RUnlock()
	return len(fake.setUnhealthyArgsForCall)
}

func (fake *FakeBackends) SetUnhealthyArgsForCall(i int) domain.Backend {
	fake.setUnhealthyMutex.RLock()
	defer fake.setUnhealthyMutex.RUnlock()
	return fake.setUnhealthyArgsForCall[i].backend
}

func (fake *FakeBackends) Healthy() <-chan domain.Backend {
	fake.healthyMutex.Lock()
	fake.healthyArgsForCall = append(fake.healthyArgsForCall, struct{}{})
	fake.healthyMutex.Unlock()
	if fake.HealthyStub != nil {
		return fake.HealthyStub()
	} else {
		return fake.healthyReturns.result1
	}
}

func (fake *FakeBackends) HealthyCallCount() int {
	fake.healthyMutex.RLock()
	defer fake.healthyMutex.RUnlock()
	return len(fake.healthyArgsForCall)
}

func (fake *FakeBackends) HealthyReturns(result1 <-chan domain.Backend) {
	fake.HealthyStub = nil
	fake.healthyReturns = struct {
		result1 <-chan domain.Backend
	}{result1}
}

func (fake *FakeBackends) AsJSON() []domain.BackendJSON {
	fake.asJSONMutex.Lock()
	fake.asJSONArgsForCall = append(fake.asJSONArgsForCall, struct{}{})
	fake.asJSONMutex.Unlock()
	if fake.AsJSONStub != nil {
		return fake.AsJSONStub()
	} else {
		return fake.asJSONReturns.result1
	}
}

func (fake *FakeBackends) AsJSONCallCount() int {
	fake.asJSONMutex.RLock()
	defer fake.asJSONMutex.RUnlock()
	return len(fake.asJSONArgsForCall)
}

func (fake *FakeBackends) AsJSONReturns(result1 []domain.BackendJSON) {
	fake.AsJSONStub = nil
	fake.asJSONReturns = struct {
		result1 []domain.BackendJSON
	}{result1}
}

var _ domain.Backends = new(FakeBackends)
