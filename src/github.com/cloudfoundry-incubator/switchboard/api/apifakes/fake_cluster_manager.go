// This file was generated by counterfeiter
package apifakes

import (
	"net"
	"sync"

	"github.com/cloudfoundry-incubator/switchboard/api"
	"github.com/cloudfoundry-incubator/switchboard/domain"
)

type FakeClusterManager struct {
	MonitorStub        func() chan<- interface{}
	monitorMutex       sync.RWMutex
	monitorArgsForCall []struct{}
	monitorReturns     struct {
		result1 chan<- interface{}
	}
	RouteToBackendStub        func(net.Conn) error
	routeToBackendMutex       sync.RWMutex
	routeToBackendArgsForCall []struct {
		arg1 net.Conn
	}
	routeToBackendReturns struct {
		result1 error
	}
	AsJSONStub        func() domain.ClusterJSON
	asJSONMutex       sync.RWMutex
	asJSONArgsForCall []struct{}
	asJSONReturns     struct {
		result1 domain.ClusterJSON
	}
	EnableTrafficStub        func(string)
	enableTrafficMutex       sync.RWMutex
	enableTrafficArgsForCall []struct {
		arg1 string
	}
	DisableTrafficStub        func(string)
	disableTrafficMutex       sync.RWMutex
	disableTrafficArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClusterManager) Monitor() chan<- interface{} {
	fake.monitorMutex.Lock()
	fake.monitorArgsForCall = append(fake.monitorArgsForCall, struct{}{})
	fake.recordInvocation("Monitor", []interface{}{})
	fake.monitorMutex.Unlock()
	if fake.MonitorStub != nil {
		return fake.MonitorStub()
	} else {
		return fake.monitorReturns.result1
	}
}

func (fake *FakeClusterManager) MonitorCallCount() int {
	fake.monitorMutex.RLock()
	defer fake.monitorMutex.RUnlock()
	return len(fake.monitorArgsForCall)
}

func (fake *FakeClusterManager) MonitorReturns(result1 chan<- interface{}) {
	fake.MonitorStub = nil
	fake.monitorReturns = struct {
		result1 chan<- interface{}
	}{result1}
}

func (fake *FakeClusterManager) RouteToBackend(arg1 net.Conn) error {
	fake.routeToBackendMutex.Lock()
	fake.routeToBackendArgsForCall = append(fake.routeToBackendArgsForCall, struct {
		arg1 net.Conn
	}{arg1})
	fake.recordInvocation("RouteToBackend", []interface{}{arg1})
	fake.routeToBackendMutex.Unlock()
	if fake.RouteToBackendStub != nil {
		return fake.RouteToBackendStub(arg1)
	} else {
		return fake.routeToBackendReturns.result1
	}
}

func (fake *FakeClusterManager) RouteToBackendCallCount() int {
	fake.routeToBackendMutex.RLock()
	defer fake.routeToBackendMutex.RUnlock()
	return len(fake.routeToBackendArgsForCall)
}

func (fake *FakeClusterManager) RouteToBackendArgsForCall(i int) net.Conn {
	fake.routeToBackendMutex.RLock()
	defer fake.routeToBackendMutex.RUnlock()
	return fake.routeToBackendArgsForCall[i].arg1
}

func (fake *FakeClusterManager) RouteToBackendReturns(result1 error) {
	fake.RouteToBackendStub = nil
	fake.routeToBackendReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClusterManager) AsJSON() domain.ClusterJSON {
	fake.asJSONMutex.Lock()
	fake.asJSONArgsForCall = append(fake.asJSONArgsForCall, struct{}{})
	fake.recordInvocation("AsJSON", []interface{}{})
	fake.asJSONMutex.Unlock()
	if fake.AsJSONStub != nil {
		return fake.AsJSONStub()
	} else {
		return fake.asJSONReturns.result1
	}
}

func (fake *FakeClusterManager) AsJSONCallCount() int {
	fake.asJSONMutex.RLock()
	defer fake.asJSONMutex.RUnlock()
	return len(fake.asJSONArgsForCall)
}

func (fake *FakeClusterManager) AsJSONReturns(result1 domain.ClusterJSON) {
	fake.AsJSONStub = nil
	fake.asJSONReturns = struct {
		result1 domain.ClusterJSON
	}{result1}
}

func (fake *FakeClusterManager) EnableTraffic(arg1 string) {
	fake.enableTrafficMutex.Lock()
	fake.enableTrafficArgsForCall = append(fake.enableTrafficArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("EnableTraffic", []interface{}{arg1})
	fake.enableTrafficMutex.Unlock()
	if fake.EnableTrafficStub != nil {
		fake.EnableTrafficStub(arg1)
	}
}

func (fake *FakeClusterManager) EnableTrafficCallCount() int {
	fake.enableTrafficMutex.RLock()
	defer fake.enableTrafficMutex.RUnlock()
	return len(fake.enableTrafficArgsForCall)
}

func (fake *FakeClusterManager) EnableTrafficArgsForCall(i int) string {
	fake.enableTrafficMutex.RLock()
	defer fake.enableTrafficMutex.RUnlock()
	return fake.enableTrafficArgsForCall[i].arg1
}

func (fake *FakeClusterManager) DisableTraffic(arg1 string) {
	fake.disableTrafficMutex.Lock()
	fake.disableTrafficArgsForCall = append(fake.disableTrafficArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DisableTraffic", []interface{}{arg1})
	fake.disableTrafficMutex.Unlock()
	if fake.DisableTrafficStub != nil {
		fake.DisableTrafficStub(arg1)
	}
}

func (fake *FakeClusterManager) DisableTrafficCallCount() int {
	fake.disableTrafficMutex.RLock()
	defer fake.disableTrafficMutex.RUnlock()
	return len(fake.disableTrafficArgsForCall)
}

func (fake *FakeClusterManager) DisableTrafficArgsForCall(i int) string {
	fake.disableTrafficMutex.RLock()
	defer fake.disableTrafficMutex.RUnlock()
	return fake.disableTrafficArgsForCall[i].arg1
}

func (fake *FakeClusterManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.monitorMutex.RLock()
	defer fake.monitorMutex.RUnlock()
	fake.routeToBackendMutex.RLock()
	defer fake.routeToBackendMutex.RUnlock()
	fake.asJSONMutex.RLock()
	defer fake.asJSONMutex.RUnlock()
	fake.enableTrafficMutex.RLock()
	defer fake.enableTrafficMutex.RUnlock()
	fake.disableTrafficMutex.RLock()
	defer fake.disableTrafficMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeClusterManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.ClusterManager = new(FakeClusterManager)
