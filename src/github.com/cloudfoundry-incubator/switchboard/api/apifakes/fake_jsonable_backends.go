// This file was generated by counterfeiter
package apifakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/switchboard/api"
	"github.com/cloudfoundry-incubator/switchboard/domain"
)

type FakeJSONableBackends struct {
	AsJSONStub        func() []domain.BackendJSON
	asJSONMutex       sync.RWMutex
	asJSONArgsForCall []struct{}
	asJSONReturns     struct {
		result1 []domain.BackendJSON
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJSONableBackends) AsJSON() []domain.BackendJSON {
	fake.asJSONMutex.Lock()
	fake.asJSONArgsForCall = append(fake.asJSONArgsForCall, struct{}{})
	fake.recordInvocation("AsJSON", []interface{}{})
	fake.asJSONMutex.Unlock()
	if fake.AsJSONStub != nil {
		return fake.AsJSONStub()
	} else {
		return fake.asJSONReturns.result1
	}
}

func (fake *FakeJSONableBackends) AsJSONCallCount() int {
	fake.asJSONMutex.RLock()
	defer fake.asJSONMutex.RUnlock()
	return len(fake.asJSONArgsForCall)
}

func (fake *FakeJSONableBackends) AsJSONReturns(result1 []domain.BackendJSON) {
	fake.AsJSONStub = nil
	fake.asJSONReturns = struct {
		result1 []domain.BackendJSON
	}{result1}
}

func (fake *FakeJSONableBackends) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.asJSONMutex.RLock()
	defer fake.asJSONMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeJSONableBackends) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.JSONableBackends = new(FakeJSONableBackends)
